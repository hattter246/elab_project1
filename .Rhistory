# Assuming 'rules' is your association rules object
# Convert rules to a data frame
rule_df <- as.data.frame(inspect(rules))
# Map item indices to item names
item_index_to_name <- setNames(data$`Item Name`, data$`Item Index`)
# Convert item indices in rules to item names
rule_df$lhs_names <- sapply(strsplit(as.character(rule_df$lhs), ", "), function(indices) {
paste(item_index_to_name[as.numeric(indices)], collapse = ", ")
})
rule_df$rhs_names <- sapply(strsplit(as.character(rule_df$rhs), ", "), function(indices) {
paste(item_index_to_name[as.numeric(indices)], collapse = ", ")
})
# Merge rules with original data using Invoice Number
merged_rules_data <- merge(rule_df, data_ar, by.x = "lhs", by.y = "Invoice Number", all.x = TRUE)
library(dplyr)
aggregated_data <- data %>%
group_by(`Invoice Number`) %>%
summarize(ItemList = toString(`Item Name`), Customer = first(`Customer Name`))
aggregated_data <- data_ar %>%
group_by(`Invoice Number`) %>%
summarize(ItemList = toString(`Item Name`), Customer = first(`Customer Name`))
transactions <- as(split(aggregated_data$ItemList, aggregated_data$`Invoice Number`), "transactions")
transactions <- as(split(aggregated_data$ItemList, aggregated_data$`Invoice Number`), "transactions")
rules <- apriori(transactions, parameter = list(support = 0.05, confidence = 0.7))
rule_df <- as.data.frame(inspect(rules))
# Merge rules with original data using Invoice Number
merged_rules_data <- merge(rule_df, aggregated_data, by.x = "lhs", by.y = "Invoice Number", all.x = TRUE)
View(aggregated_data)
library(dplyr)
aggregated_data <- data_ar %>%
group_by(`Invoice Number`) %>%
summarize(ItemList = toString(`Item Name`), Customer = first(`Customer Name`))
transactions <- as(split(aggregated_data$ItemList, aggregated_data$`Invoice Number`), "transactions")
rules <- apriori(transactions, parameter = list(support = 0.05, confidence = 0.7))
rule_df <- as.data.frame(inspect(rules))
# Merge rules with original data using Invoice Number
merged_rules_data <- merge(rule_df, aggregated_data, by.x = "lhs", by.y = "Invoice Number", all.x = TRUE)
rule_df <- as(rules, "data.frame")
# Merge rules with original data using Invoice Number
merged_rules_data <- merge(rule_df, aggregated_data, by.x = "lhs", by.y = "Invoice Number", all.x = TRUE)
aggregated_data <- data_ar %>%
group_by(`Invoice Number`) %>%
summarize(ItemList = toString(`Item Name`), Customer = first(`Customer Name`))
aggregated_data <- data_ar %>%
group_by(`Invoice Number`) %>%
summarize(ItemList = toString(`Item Name`), Customer = first(`Customer Name`))
transactions <- as(split(aggregated_data$ItemList, aggregated_data$`Invoice Number`), "transactions")
aggregated_data <- data_ar %>%
group_by(`Invoice Number`) %>%
summarize(ItemList = toString(`Item Name`), Customer = first(`Customer Name`))
transactions <- as(split(aggregated_data$ItemList, aggregated_data$`Invoice Number`), "transactions")
rules <- apriori(transactions, parameter = list(support = 0.05, confidence = 0.7))
transactions <- as(split(aggregated_data$ItemList, aggregated_data$`Invoice Number`), "transactions")
rules <- apriori(transactions, parameter = list(support = 0.05, confidence = 0.7))
rule_df <- as(rules, "data.frame")
rules <- apriori(transactions, parameter = list(support = 0.05, confidence = 0.7))
rule_df <- as(rules, "data.frame")
# Merge rules with original data using Invoice Number
merged_rules_data <- merge(rule_df, aggregated_data, by.x = "lhs", by.y = "Invoice Number", all.x = TRUE)
transactions <- as(split(aggregated_data$ItemList, aggregated_data$`Invoice Number`), "transactions")
rules <- apriori(transactions, parameter = list(support = 0.01, confidence = 0.7))
rule_df <- as(rules, "data.frame")
# Merge rules with original data using Invoice Number
merged_rules_data <- merge(rule_df, aggregated_data, by.x = "lhs", by.y = "Invoice Number", all.x = TRUE)
rules <- apriori(transactions, parameter = list(support = 0.01, confidence = 0.5))
rule_df <- as(rules, "data.frame")
# Merge rules with original data using Invoice Number
merged_rules_data <- merge(rule_df, aggregated_data, by.x = "lhs", by.y = "Invoice Number", all.x = TRUE)
rules2 <- apriori(transactions, parameter = list(support = 0.01, confidence = 0.5))
View(rules2)
rule_df <- as(rules, "data.frame")
rule2_df <- as(rules, "data.frame")
rules2 <- apriori(transactions, parameter = list(support = 0.01, confidence = 0.5,minlen = 2)))
rules2 <- apriori(transactions, parameter = list(support = 0.01, confidence = 0.5,minlen = 2))
rule2_df <- as(rules, "data.frame")
# Merge rules with original data using Invoice Number
merged_rules_data <- merge(rule_df, aggregated_data, by.x = "lhs", by.y = "Invoice Number", all.x = TRUE)
options(arules.debug = TRUE)
rules <- apriori(transactions, parameter = list(support = 0.01, confidence = 0.5))
options(arules.debug = FALSE)
options(arules.debug = TRUE)
rules <- apriori(transactions, parameter = list(support = 0.01, confidence = 0.5))
# Assuming your data frame is named 'your_data' and items are in a column 'ItemList'
transactions <- strsplit(your_data$ItemList, ",")
# Assuming your data frame is named 'your_data' and items are in a column 'ItemList'
transactions <- strsplit(aggregated_data$ItemList, ",")
# Convert the transactions to the 'transactions' class
transactions <- as(transactions, "transactions")
rules2 <- apriori(transactions, parameter = list(support = 0.01, confidence = 0.5))
rule2_df <- as(rules, "data.frame")
transactions2 <- as(split(aggregated_data$ItemList, aggregated_data$`Invoice Number`), "transactions")
transactions2 <- as(split(aggregated_data$ItemList, aggregated_data$`Invoice Number`), "transactions")
# Assuming your data frame is named 'your_data' and items are in a column 'ItemList'
transactions2 <- strsplit(aggregated_data$ItemList, ",")
# Convert the transactions to the 'transactions' class
transactions2 <- as(transactions2, "transactions")
rules2 <- apriori(transactions2, parameter = list(support = 0.01, confidence = 0.5))
rule2_df <- as(rules, "data.frame")
transactions2 <- as(split(aggregated_data$ItemList, aggregated_data$`Invoice Number`), "transactions")
transactions2 <- as(split(aggregated_data$ItemList, aggregated_data$`Invoice Number`), "transactions")
# Assuming your data frame is named 'your_data' and items are in a column 'ItemList'
transactions2 <- strsplit(aggregated_data$ItemList, ",")
# Convert the transactions to the 'transactions' class
transactions2 <- as(transactions2, "transactions")
rules2 <- apriori(transactions2, parameter = list(support = 0.001, confidence = 0.5))
rules2 <- apriori(transactions2, parameter = list(support = 0.001, confidence = 0.5))
rule2_df <- as(rules, "data.frame")
rules2 <- apriori(transactions2, parameter = list(support = 0.008, confidence = 0.5))
rules2 <- apriori(transactions2, parameter = list(support = 0.005, confidence = 0.5))
rule2_df <- as(rules, "data.frame")
gc()
gc()
library(dplyr)
library(knitr)
data = readxl::read_excel("/Users/hatemal-khatib/Desktop/Raw Data 2023.xlsx")
columns_with_nas <- colSums(is.na(data)) > 0
# Print the columns with NAs
print(names(data)[columns_with_nas])
#replaced the NAs with 0s or NAs (for item size)
data$`Return Reason` <- ifelse(is.na(data$`Return Reason`), 0, data$`Return Reason`)
data$`PO Number` <- ifelse(is.na(data$`PO Number`), 0, data$`PO Number`)
data$`Item Type` <- ifelse(is.na(data$`Item Type`), 0, data$`Item Type`)
data$`Pack Group` <- ifelse(is.na(data$`Pack Group`), 0, data$`Pack Group`)
data$`Bonus` <- ifelse(is.na(data$`Bonus`), 0, data$`Bonus`)
data$`Item Size` <- ifelse(is.na(data$`Item Size`), "NA", data$`Item Size`)
#by customer and by brand
library(tidyr)
data_returns = data %>%
group_by(`Order Number`) %>%
filter(`Order Type` == "Private Sales Return Order") %>%
distinct(`Invoice Number`, .keep_all = TRUE)
total_orders_per_salesman <- data %>% #to add the total orders per salesman column
group_by(`Salesman name`) %>%
distinct(`Order Number`, .keep_all = TRUE) %>%
summarize(TotalOrders_persm = n())
frequency_by_SalesManName = data_returns %>% #sumarizing the freq of returns per sm
group_by(`Salesman name`) %>%
summarize(frequency_of_returns = n())
frequency_by_SalesManName <- frequency_by_SalesManName %>% # adding the total orders per sm
left_join(total_orders_per_salesman, by = "Salesman name")
frequency_by_SalesManName = frequency_by_SalesManName %>%  #calculating the percentage
mutate(Percentage_of_returned_orders = (frequency_of_returns/TotalOrders_persm) *100) %>%
mutate(Percentage_of_returned_orders = round(Percentage_of_returned_orders, digits=2))
return_reason_frequency <- data_returns %>% #return reason freq calculating
group_by(`Salesman name`, `Return Reason`) %>%
count(name = "Frequency")
return_reason_frequency <- return_reason_frequency %>% #transposing
spread(`Return Reason`, Frequency, fill = 0)
frequency_by_SalesManName <- frequency_by_SalesManName %>% # adding to og df
left_join(return_reason_frequency, by = "Salesman name")
# average order amount per sales man per invoice total
total_sales_by_SalesMan <- data %>%
group_by(`Salesman name`) %>%
summarise(TotalSales = sum(`Net Value`, na.rm = TRUE))
total_sales_by_SalesMan_returns <- data_returns %>%
group_by(`Salesman name`) %>%
summarise(TotalSales_returns = sum(`Net Value`, na.rm = TRUE))
frequency_by_SalesManName <- frequency_by_SalesManName %>% # adding to og df
left_join(total_sales_by_SalesMan_returns, by = "Salesman name") %>%
left_join(total_sales_by_SalesMan,by = "Salesman name")
library(openxlsx)
excel_file_path <- "/Users/hatemal-khatib/Desktop/ALMUFIDR/frequency_by_SalesmanName_returns.xlsx"
write.xlsx(frequency_by_SalesManName, file = excel_file_path, rowNames = FALSE, create = TRUE)
#report by division by city by month frequency of orders for each customer
options(scipen = 999, digits = 4)
data <- data%>%
mutate(Month = format(`Invoice Date`, "%Y-%m"))
# Create the report
report <- data %>%
group_by(Division, CITY, Month, `Customer Name`) %>%
summarize(Frequency = n()) %>%
spread(key = Month, value = Frequency, fill = 0)
order_value_report = data %>%
group_by(Division, CITY, Month, `Customer Name`) %>%
summarize(TotalOrderValue = round(sum(`Net Value`, na.rm = TRUE),0)) %>%
spread(key = Month, value = TotalOrderValue, fill = 0)
options(scipen = 999, digits = 4)
merged_report <- left_join(report, order_value_report, by = c("Division", "CITY", "Customer Name")) %>%
mutate(Total_orders = round(`2023-01.x`+ `2023-02.x`+ `2023-03.x`+ `2023-04.x`+ `2023-05.x`+ `2023-06.x`+ `2023-07.x`+ `2023-08.x`+ `2023-09.x`+ `2023-10.x`+ `2023-11.x`+ `2023-12.x`,0)) %>%
mutate(Avg_order_per_month = round((Total_orders/12),0)) %>%
mutate(Total_value_orders = round(`2023-01.y` + `2023-02.y` + `2023-03.y` + `2023-04.y` + `2023-05.y` + `2023-06.y` + `2023-07.y` + `2023-08.y` + `2023-09.y` + `2023-10.y` + `2023-11.y` + `2023-12.y`,0)) %>%
mutate(Avg_Value_per_order = (Total_value_orders/Total_orders)) %>%
mutate(Avg_Value_per_order=round(Avg_Value_per_order,0))
excel_file_path2 <- "/Users/hatemal-khatib/Desktop/ALMUFIDR/report_by_month.xlsx"
write.xlsx(merged_report, file = excel_file_path2, rowNames = FALSE, create = TRUE)
library(arules)
library(dplyr)
# Select relevant columns
selected_columns <- c("Invoice Number", "Invoice Date", "Customer Name", "Item Name")
data_ar <- data %>%
filter(`Order Type` == "Private Sales Orders") %>%
select(all_of(selected_columns))
# Create transactions
transactions <- data_ar %>%
group_by(`Invoice Number`) %>%
summarize(Items = list(as.character(`Item Name`)))
# Filter transactions with more than one product
transactions <- transactions[sapply(transactions$Items, length) > 1, ]
# Convert to transactions
transaction_dataset <- as(transactions$Items, "transactions")
# Generate association rules
rules <- apriori(transaction_dataset, parameter = list(support = 0.05, confidence = 0.8))
# Visualize rules
plot(rules)
rule_list <- as(rules, "data.frame")
# View the rule data frame
View(rule_list)
# Generate association rules
rules <- apriori(transaction_dataset, parameter = list(support = 0.1, confidence = 0.6))
rule_list <- as(rules, "data.frame")
# View the rule data frame
View(rule_list)
# Generate association rules
rules <- apriori(transaction_dataset, parameter = list(support = 0.09, confidence = 0.6))
rule_list <- as(rules, "data.frame")
# View the rule data frame
View(rule_list)
# Generate association rules
rules <- apriori(transaction_dataset, parameter = list(support = 0.05, confidence = 0.8))
rule_list <- as(rules, "data.frame")
# View the rule data frame
View(rule_list)
# Assuming 'data' is your sales report
features <- data_ar[, c("TotalOrderValue", "Frequency")]  # Choose relevant features
View(merged_report)
# Assuming 'data' is your sales report
features <- merged_report[, c("Total_value_orders", "Total_orders")]  # Choose relevant features
kmeans_model <- kmeans(features, centers = 3)  # Choose the number of clusters
clusters <- kmeans_model$cluster
# Assuming 'data' is your sales report and 'clusters' is the result from K-means clustering
library(ggplot2)
# Combine the cluster assignment with the original data
data_with_clusters <- cbind(data, Cluster = clusters)
# Combine the cluster assignment with the original data
data_with_clusters <- cbind(merged_report, Cluster = clusters)
# Choose two features for visualization (adjust as per your data)
feature1 <- "Total_value_orders"
feature2 <- "Total_orders"
# Plot the clusters
ggplot(data_with_clusters, aes_string(x = feature1, y = feature2, color = "factor(Cluster)")) +
geom_point() +
labs(title = "K-means Clustering", x = feature1, y = feature2)
# Assuming 'data' is your sales report
features <- merged_report[, c("Total_value_orders", "Total_orders", "Division")]  # Choose relevant features
kmeans_model <- kmeans(features, centers = 3)  # Choose the number of clusters
# Generate association rules
rules <- apriori(transaction_dataset, parameter = list(support = 0.035, confidence = 0.8))
rule_list <- as(rules, "data.frame")
# View the rule data frame
View(rule_list)
View(data)
# Select relevant columns
selected_columns <- c("Invoice Number", "Invoice Date", "Customer Name", "Item Name")
data_ar_flx <- data %>%
filter(`Order Type` == "Private Sales Orders") %>%
filter(Brand=="FLX") %>%
select(all_of(selected_columns))
View(data_ar_flx)
# Create transactions
transactions <- data_ar_flx %>%
group_by(`Invoice Number`) %>%
summarize(Items = list(as.character(`Item Name`)))
r
# Create transactions
transactions_flx <- data_ar_flx %>%
group_by(`Invoice Number`) %>%
summarize(Items = list(as.character(`Item Name`)))
# Filter transactions with more than one product
transactions <- transactions_flx[sapply(transactions$Items, length) > 1, ]
# Convert to transactions
transaction_flx_dataset <- as(transactions_flx$Items, "transactions")
# Generate association rules
rules <- apriori(transaction_flx_dataset, parameter = list(support = 0.035, confidence = 0.8))
rule_list <- as(rules, "data.frame")
rule_list4 <- as(rules, "data.frame")
# View the rule data frame
View(rule_list4)
# Generate association rules
rules <- apriori(transaction_flx_dataset, parameter = list(support = 0.01, confidence = 0.8))
rule_list4 <- as(rules, "data.frame")
# View the rule data frame
View(rule_list4)
# Generate association rules
rules <- apriori(transaction_flx_dataset, parameter = list(support = 0.025, confidence = 0.8))
rule_list4 <- as(rules, "data.frame")
# View the rule data frame
View(rule_list4)
#flexitol
# Select relevant columns
selected_columns <- c("Invoice Number", "Invoice Date", "Customer Name", "Item Name")
data_ar_flx <- data %>%
filter(`Order Type` == "Private Sales Orders") %>%
filter(Brand=="FLX") %>%
select(all_of(selected_columns))
# Create transactions
transactions_flx <- data_ar_flx %>%
group_by(`Invoice Number`) %>%
summarize(Items = list(as.character(`Item Name`)))
# Filter transactions with more than one product
transactions <- transactions_flx[sapply(transactions$Items, length) > 1, ]
# Filter transactions with more than one product
transactions <- transactions_flx[sapply(transactions$Items, length) > 1, ]
# Filter transactions with more than one product
transactions_flx <- transactions_flx[sapply(transactions$Items, length) > 1, ]
# Filter transactions with more than one product
transactions_flx <- transactions_flx[sapply(transactions_flx$Items, length) > 1, ]
# Convert to transactions
transaction_flx_dataset <- as(transactions_flx$Items, "transactions")
# Generate association rules
rules_flx <- apriori(transaction_flx_dataset, parameter = list(support = 0.025, confidence = 0.8))
rule_list_flx <- as(rules, "data.frame")
# View the rule data frame
View(rule_list_flx)
# Generate association rules
rules_flx <- apriori(transaction_flx_dataset, parameter = list(support = 0.02, confidence = 0.8))
rule_list_flx <- as(rules, "data.frame")
# View the rule data frame
View(rule_list_flx)
# Generate association rules
rules_flx <- apriori(transaction_flx_dataset, parameter = list(support = 0.015, confidence = 0.8))
rule_list_flx <- as(rules, "data.frame")
# View the rule data frame
View(rule_list_flx)
# Generate association rules
rules_flx <- apriori(transaction_flx_dataset, parameter = list(support = 0.015, confidence = 0.8))
rule_list_flx <- as(rules_flx, "data.frame")
# View the rule data frame
View(rule_list_flx)
# Generate association rules
rules_flx <- apriori(transaction_flx_dataset, parameter = list(support = 0.02, confidence = 0.8))
rule_list_flx <- as(rules_flx, "data.frame")
# View the rule data frame
View(rule_list_flx)
# Assuming 'data' is your sales report with features and a target variable 'RecommendedProduct'
model <- recommenderlab::IBCF(data_ar_flx)
time_series_model <- auto.arima(merged_report$Total_orders)
install.packages("forcast")
install.packages("forecast")
library(forecast)
library(forecast)
time_series_model <- auto.arima(merged_report$Total_orders)
future_forecast <- forecast(time_series_model, h = 12)
View(future_forecast)
# Assuming 'forecast_result' is your forecast result from the 'forecast' package
plot(future_forecast, main = "Future Forecast", xlab = "Time", ylab = "Values")
# Assuming 'merged_report' is your wide-format data frame
long_format_data <- merged_report %>%
gather(key = "TimePoint", value = "Value", -c("Division", "CITY", "Customer Name"))
# Optionally, convert the 'TimePoint' column to a Date object if needed
long_format_data$TimePoint <- as.Date(long_format_data$TimePoint, format = "%Y-%m")
time_series_model <- auto.arima(long_format_data$Total_orders)
View(long_format_data)
# Assuming 'merged_report' is your wide-format data frame
long_format_data <- merged_report %>%
gather(key = "Month", value = "Value", -c("Division", "CITY", "Customer Name"))
# Optionally, convert the 'TimePoint' column to a Date object if needed
long_format_data$TimePoint <- as.Date(long_format_data$TimePoint, format = "%Y-%m")
# Optionally, convert the 'TimePoint' column to a Date object if needed
long_format_data$TimePoint <- as.Date(long_format_data$Month, format = "%Y-%m")
time_series_model <- auto.arima(long_format_data$Total_orders)
View(long_format_data)
# Optionally, convert the 'TimePoint' column to a Date object if needed
long_format_data$TimePoint <- as.Date(long_format_data$Month, format = "%Y-%m")
# Assuming 'merged_report' is your wide-format data frame
long_format_data <- merged_report %>%
gather(key = "Month", value = "Value", -c("Division", "CITY", "Customer Name"))
# Optionally, convert the 'TimePoint' column to a Date object if needed
long_format_data$Month <- as.Date(long_format_data$Month, format = "%Y-%m")
time_series_model <- auto.arima(long_format_data$Total_orders)
View(long_format_data)
# Assuming 'merged_report' is your wide-format data frame
long_format_data <- data %>%
group_by(Division, CITY, Month, `Customer Name`) %>%
summarize(Frequency = n()) %>%
# Optionally, convert the 'TimePoint' column to a Date object if needed
long_format_data$Month <- as.Date(long_format_data$Month, format = "%Y-%m")
# Assuming 'merged_report' is your wide-format data frame
long_format_data <- data %>%
group_by(Division, CITY, Month, `Customer Name`) %>%
summarize(Frequency = n())
# Optionally, convert the 'TimePoint' column to a Date object if needed
long_format_data$Month <- as.Date(long_format_data$Month, format = "%Y-%m")
time_series_model <- auto.arima(long_format_data$Total_orders)
View(long_format_data)
# Assuming 'merged_report' is your wide-format data frame
long_format_data <- data %>%
group_by(Division, CITY, Month, `Customer Name`) %>%
summarize(Frequency = n())
View(long_format_data)
# Optionally, convert the 'TimePoint' column to a Date object if needed
long_format_data$Month <- as.Date(long_format_data$Month, format = "%Y-%m")
install.packages("zoo")
install.packages("zoo")
library(zoo)
# Optionally, convert the 'TimePoint' column to a Date object if needed
long_format_data$Month <- as.yearmon(long_format_data$Month, "%Y-%m")
View(long_format_data)
# Assuming 'merged_report' is your wide-format data frame
long_format_data <- data %>%
group_by(Division, CITY, Month, `Customer Name`) %>%
summarize(Frequency = n())
# Optionally, convert the 'TimePoint' column to a Date object if needed
# Assuming 'long_format_data' is your data frame
long_format_data$Month <- as.Date(paste0(long_format_data$Month, "-01"), format = "%Y-%m-%d")
# Assuming 'merged_report' is your wide-format data frame
long_format_data <- data %>%
group_by(Division, CITY, `Invoice Date`, `Customer Name`) %>%
summarize(Frequency = n())
# Optionally, convert the 'TimePoint' column to a Date object if needed
# Assuming 'long_format_data' is your data frame
long_format_data$`Invoice Date` <- as.Date(paste0(long_format_data$`Invoice Date`, "-01"), format = "%Y-%m-%d")
time_series_model <- auto.arima(long_format_data$Total_orders)
time_series_model <- auto.arima(long_format_data$Frequency)
future_forecast <- forecast(time_series_model, h = 12)
# Assuming 'forecast_result' is your forecast result from the 'forecast' package
plot(future_forecast, main = "Future Forecast", xlab = "Time", ylab = "Values")
forecast_values <- forecast_result$your_forecast_column
forecast_values <- future_forecast$your_forecast_column
# Create a data frame with 'Month' and 'Forecasted_Values' columns
forecast_data <- data.frame(Month = time_series_data$Month, Forecasted_Values = forecast_values)
# Create a data frame with 'Month' and 'Forecasted_Values' columns
forecast_data <- data.frame(Month = long_format_data$Month, Forecasted_Values = forecast_values)
# Create a data frame with 'Month' and 'Forecasted_Values' columns
forecast_data <- data.frame(Month = long_format_data$`Invoice Date`, Forecasted_Values = forecast_values)
# Assuming 'forecast_result' is your forecast result from the 'forecast' package
plot(future_forecast, main = "Future Forecast", xlab = "Time", ylab = "Values")
View(future_forecast)
# Extract forecasted values
forecast_values <- future_forecast$your_forecast_column
# Create a data frame with 'Month' and 'Total_orders' columns
time_series_data <- long_format_data[, c("your_date_column", "your_total_orders_column")]
print(names(forecast_result))
print(names(future_forecast))
# Extract forecasted values
forecast_values <- forecast_result$mean
# Extract forecasted values
forecast_values <- future_forecast$mean
# Create a data frame with 'Month' and 'Total_orders' columns
time_series_data <- long_format_data[, c("Invoice Date", "Frequency")]
# Create a data frame with 'Month' and 'Forecasted_Values' columns
forecast_data <- data.frame(Month = long_format_data$`Invoice Date`, Forecasted_Values = forecast_values)
View(data)
setwd("/Users/hatemal-khatib/PycharmProjects/elab_project1")
library(tidyverse)  # For data manipulation and visualization
# Define department code to department name mapping
department_mapping <- list(
"1" = "Bakery & Pastry",
"2" = "Beer & Wine",
"3" = "Books & Magazines",
"4" = "Candy & Chips",
"5" = "Care & Hygiene",
"6" = "Cereals & Spreads",
"7" = "Cheese & Tapas",
"8" = "Dairy & Eggs",
"9" = "Freezer",
"10" = "Fruit & Vegetables",
"11" = "Household & Pet",
"12" = "Meat & Fish",
"13" = "Pasta & Rice",
"14" = "Salads & Meals",
"15" = "Sauces & Spices",
"16" = "Soda & Juices",
"17" = "Special Diet",
"18" = "Vegetarian & Vegan"
)
# Read the CSV file
df <- read.csv("supermarket.csv", header = FALSE)
# Rename columns
colnames(df) <- c("customer_id", "parsed_transactions")
# Convert parsed transactions from string to list
df$parsed_transactions <- lapply(df$parsed_transactions, function(x) strsplit(as.character(x), ", "))
# Explode the list into multiple rows
df <- df %>%
rowwise() %>%
mutate(parsed_transactions = list(parsed_transactions)) %>%
unnest()
View(data)
library(tidyverse)  # For data manipulation and visualization
# Define department code to department name mapping
department_mapping <- list(
"1" = "Bakery & Pastry",
"2" = "Beer & Wine",
"3" = "Books & Magazines",
"4" = "Candy & Chips",
"5" = "Care & Hygiene",
"6" = "Cereals & Spreads",
"7" = "Cheese & Tapas",
"8" = "Dairy & Eggs",
"9" = "Freezer",
"10" = "Fruit & Vegetables",
"11" = "Household & Pet",
"12" = "Meat & Fish",
"13" = "Pasta & Rice",
"14" = "Salads & Meals",
"15" = "Sauces & Spices",
"16" = "Soda & Juices",
"17" = "Special Diet",
"18" = "Vegetarian & Vegan"
)
# Read the CSV file
df <- read.csv("supermarket.csv", header = FALSE)
# Rename columns
colnames(df) <- c("customer_id", "parsed_transactions")
# Convert parsed transactions from string to list
df$parsed_transactions <- lapply(df$parsed_transactions, function(x) strsplit(as.character(x), ", "))
# Explode the list into multiple rows
df <- df %>%
rowwise() %>%
mutate(parsed_transactions = list(parsed_transactions)) %>%
unnest()
View(department_mapping)
View(df)
